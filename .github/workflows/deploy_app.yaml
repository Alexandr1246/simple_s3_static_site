name: 4-Deploy App to Kubernetes

#on:
#  workflow_run:
#    workflows: ["Deploy K8S Infrastructure"]
#    types:
#      - completed
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    
permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::050451395507:role/github-oidc-role
          aws-region: eu-north-1

      - name: Wait for Kubernetes cluster to be ready
        run: |
          mkdir -p ~/.kube
          for i in $(seq 1 20); do
            echo "Attempt $i: Fetching kubeconfig..."
            aws ssm get-parameter --name "/k8s/kubeconfig" --with-decryption --query "Parameter.Value" --output text > ~/.kube/config
            
            echo "Checking cluster accessibility..."
            kubectl get nodes && break

            echo "Cluster not ready yet, sleeping 15 seconds..."
            sleep 30
          done

      - name: Create DockerHub imagePullSecret in Kubernetes
        run: |
          kubectl create secret docker-registry regcred \
            --docker-username="${{ secrets.DOCKER_HUB_USERNAME }}" \
            --docker-password="${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" \
            --docker-email="ci@example.com" \
            --namespace=default \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Install Helm
        uses: azure/setup-helm@v3

      - name: Deploy NGINX chart
        run: |
          helm upgrade --install nginx-test helm/nginx-chart --namespace default --create-namespace --debug

      - name: Deploy FLASK chart
        run: |
          helm upgrade --install flask-app helm/flask-chart \
            --namespace default \
            --set image.pullSecrets[0].name=regcred \
            --create-namespace \
            --debug

